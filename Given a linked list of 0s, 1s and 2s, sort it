Question : 

Given a linked list of N nodes where nodes can contain values 0s, 1s, and 2s only. The task is to segregate 0s, 1s, and 2s linked list such that all zeros segregate to head side, 2s at the end of the linked list, and 1s in the mid of 0s and 2s.
Input:
N = 8
value[] = {1,2,2,1,2,0,2,2}
Output: 0 1 1 2 2 2 2 2

Input:
N = 4
value[] = {2,2,0,1}
Output: 0 1 2 2

Solution :
 // 1st Approach 
 // Count number of 0s 1s 2s
 //traversed list and replace 0 with 0 , 1 with 1 and 2 with 2
 // print list
 Node* segregate(Node *head) {
        
        // Add code here
        int zeroCount =0;
        int oneCount =0;
        int twoCount =0;
        
        Node* temp=head;
        while(temp!=NULL){
            if(temp->data==0)
                zeroCount++;
            else if(temp->data==1)
                oneCount++;
            else if(temp->data==2)
                twoCount++;
            
            temp = temp->next;
        }
        temp = head;
        
        while(temp!= NULL){
            if(zeroCount!=0){
                temp->data = 0;
                zeroCount--;
            }
            else if(oneCount!=0){
                temp->data = 1;
                oneCount--;
            }
            else if(twoCount!=0){
                temp->data = 2;
                twoCount--;
            }
            temp = temp->next;
        }
        return head;
    }
    
    // 2nd Approach 
    // create 3 dummy list and store 0s , 1s, 2s respectively 
    //and Merge 3 list like 0s->1s->2s
    //delete dummy nodes 
    //print list
    
    code : 
    class Solution
{
    public:
    //Function to sort a linked list of 0s, 1s and 2s.
    void insertAtTail(Node* &tail , Node* curr){
        tail->next = curr;
        tail = curr;
    }
    
    
    
    Node* segregate(Node *head) {
        
        // Add code here
        Node* zeroHead = new Node(-1);
        Node* zeroTail = zeroHead;
        Node* oneHead = new Node(-1);
        Node* oneTail = oneHead;
        Node* twoHead = new Node(-1);
        Node* twoTail = twoHead;
        
        Node* curr = head;
        
        // Create seperate lists of 0s 1s 2s
        while(curr!=NULL){
            int value = curr->data;
            if(value==0){
                insertAtTail(zeroTail,curr);
            }
            else if(value==1){
                insertAtTail(oneTail,curr);
            }
            else if(value==2){
                insertAtTail(twoTail,curr);
            }
            curr = curr->next;
        }
        
        
        
     // Merge 3 sublists 
     
     //1s list not empty
     if(oneHead->next!=NULL){
        zeroTail->next = oneHead->next;
     }
     else{
         //1s empty-list
         zeroTail->next = twoHead->next;
     }
     
     oneTail->next = twoHead->next;
     twoTail->next = NULL;
     
     //setup head
     head = zeroHead->next;
     //delete dummynode
     delete zeroHead;
     delete oneHead;
     delete twoHead;
     
     
     return head;
    }
};
    
    
    
    
    
