Question :
Given the head of a singly linked list, return true if it is a palindrome.
Input: head = [1,2,2,1]
Output: true

Input: head = [1,2]
Output: false

Constraints:
The number of nodes in the list is in the range [1, 105].
0 <= Node.val <= 9

Solution  : 
                                     APPROACH 1 -   time- O(n) , space- O(n)

1. create an array.
2. push all the linked list data into created array.
3. check first and last element of array ,  if they are not equal return false otherwise true

#include<vector>
class Solution {
 private:   
   bool checkPalindrme(vector<int>arr){
       int n = arr.size();
       int s=0;
       int e=n-1;
       while(s<=e){
           if(arr[s]!=arr[e])
               return 0;
           s++;
           e--;
       }
       return 1;
       
   } 
public:
    bool isPalindrome(ListNode* head) {
        vector<int>arr;
        
        ListNode* temp = head;
        while(temp!=NULL){
            arr.push_back(temp->val);
            temp = temp->next;
        }
        
        return checkPalindrme(arr);
        
    }
};

                                              APPROACH 2 -   time- O(n) , space- O(1)
step1 : find middle
step2: reverse middle to end of list
step3: compare both halves;
step4: repeate step2


class Solution {
private:
    ListNode* getMid(ListNode* head){
        ListNode* slow = head;
        ListNode* fast = head->next;
        while(fast!=NULL && fast->next!=NULL){
            slow = slow->next;
            fast = fast->next->next;
        }
        return slow;
    }
    
    ListNode* reverse(ListNode* head){
        ListNode* curr = head;
        ListNode* prev = NULL;
        ListNode* next = NULL;
        while(curr!=NULL){
            next = curr->next;
            curr->next = prev;
            prev = curr;
            curr = next;
        }
        return prev;
    }
    
    
public:
    bool isPalindrome(ListNode* head) {
        if(head->next==NULL)
            return true;
        //step 1 find middle 
        ListNode* middle = getMid(head);
        
        //step 2 : reverse list after middle
        ListNode* temp = middle->next;
        middle->next = reverse(temp);
        //step 3 compare both halves
        ListNode* head1 = head;
        ListNode* head2 = middle->next;
        
        while(head2!=NULL){
            if(head1->val!=head2->val)
                return false;
            head1 = head1->next;
            head2 = head2->next;
            
            
        }
        //step 4 repeat step 2
        temp = middle->next;
        middle->next = reverse(temp);
        
        return true;
    }
};


