Question : 
Given the head of a singly linked list, reverse the list, and return the reversed list.

Input: head = [1,2,3,4,5]
Output: [5,4,3,2,1]

Input: head = [1,2]
Output: [2,1]

Input: head = []
Output: []

Constraints:

The number of nodes in the list is the range [0, 5000].
-5000 <= Node.val <= 5000

Solution : iterative and recursive Both

                                                ITERATIVE APPROACH 

class Solution {
public:
    ListNode* reverseList(ListNode* head) {
       ListNode* curr = head;
       ListNode* prev = nullptr;
       
        while(curr!=NULL){
            ListNode* temp = curr->next;
            curr->next = prev;
            prev = curr; 
            curr = temp;
        }
        
        return prev;
    }
};


                                           RECURSIVE APPROACH 
                                           
                                           
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        if(head == NULL || head->next==NULL)
            return head;
        
       ListNode* newhead = reverseList(head->next);
       ListNode* headnext = head->next;
       headnext->next = head;
       head->next = NULL;
       return newhead;
    }
};
